/* _content/GridLancamento/Components/Layout/MainLayout.razor.rz.scp.css */
.page[b-fwlnemr4og] {
    position: relative;
    display: flex;
    flex-direction: column;
}

main[b-fwlnemr4og] {
    flex: 1;
}

.sidebar[b-fwlnemr4og] {
    background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
}

.top-row[b-fwlnemr4og] {
    background-color: #f7f7f7;
    border-bottom: 1px solid #d6d5d5;
    justify-content: flex-end;
    height: 3.5rem;
    display: flex;
    align-items: center;
}

    .top-row[b-fwlnemr4og]  a, .top-row[b-fwlnemr4og]  .btn-link {
        white-space: nowrap;
        margin-left: 1.5rem;
        text-decoration: none;
    }

    .top-row[b-fwlnemr4og]  a:hover, .top-row[b-fwlnemr4og]  .btn-link:hover {
        text-decoration: underline;
    }

    .top-row[b-fwlnemr4og]  a:first-child {
        overflow: hidden;
        text-overflow: ellipsis;
    }

@media (max-width: 640.98px) {
    .top-row[b-fwlnemr4og] {
        justify-content: space-between;
    }

    .top-row[b-fwlnemr4og]  a, .top-row[b-fwlnemr4og]  .btn-link {
        margin-left: 0;
    }
}

@media (min-width: 641px) {
    .page[b-fwlnemr4og] {
        flex-direction: row;
    }

    .sidebar[b-fwlnemr4og] {
        width: 250px;
        height: 100vh;
        position: sticky;
        top: 0;
    }

    .top-row[b-fwlnemr4og] {
        position: sticky;
        top: 0;
        z-index: 1;
    }

    .top-row.auth[b-fwlnemr4og]  a:first-child {
        flex: 1;
        text-align: right;
        width: 0;
    }

    .top-row[b-fwlnemr4og], article[b-fwlnemr4og] {
        padding-left: 2rem !important;
        padding-right: 1.5rem !important;
    }
}

#blazor-error-ui[b-fwlnemr4og] {
    background: lightyellow;
    bottom: 0;
    box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
    display: none;
    left: 0;
    padding: 0.6rem 1.25rem 0.7rem 1.25rem;
    position: fixed;
    width: 100%;
    z-index: 1000;
}

    #blazor-error-ui .dismiss[b-fwlnemr4og] {
        cursor: pointer;
        position: absolute;
        right: 0.75rem;
        top: 0.5rem;
    }
/* _content/GridLancamento/Components/Layout/NavMenu.razor.rz.scp.css */
.navbar-toggler[b-74pomlm8zd] {
    appearance: none;
    cursor: pointer;
    width: 3.5rem;
    height: 2.5rem;
    color: white;
    position: absolute;
    top: 0.5rem;
    right: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.1);
    background: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e") no-repeat center/1.75rem rgba(255, 255, 255, 0.1);
}

.navbar-toggler:checked[b-74pomlm8zd] {
    background-color: rgba(255, 255, 255, 0.5);
}

.top-row[b-74pomlm8zd] {
    height: 3.5rem;
    background-color: rgba(0,0,0,0.4);
}

.navbar-brand[b-74pomlm8zd] {
    font-size: 1.1rem;
}

.bi[b-74pomlm8zd] {
    display: inline-block;
    position: relative;
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.75rem;
    top: -1px;
    background-size: cover;
}

.bi-house-door-fill-nav-menu[b-74pomlm8zd] {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-house-door-fill' viewBox='0 0 16 16'%3E%3Cpath d='M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5Z'/%3E%3C/svg%3E");
}

.bi-plus-square-fill-nav-menu[b-74pomlm8zd] {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-plus-square-fill' viewBox='0 0 16 16'%3E%3Cpath d='M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2zm6.5 4.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3a.5.5 0 0 1 1 0z'/%3E%3C/svg%3E");
}

.bi-list-nested-nav-menu[b-74pomlm8zd] {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='white' class='bi bi-list-nested' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M4.5 11.5A.5.5 0 0 1 5 11h10a.5.5 0 0 1 0 1H5a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 3 7h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm-2-4A.5.5 0 0 1 1 3h10a.5.5 0 0 1 0 1H1a.5.5 0 0 1-.5-.5z'/%3E%3C/svg%3E");
}

.nav-item[b-74pomlm8zd] {
    font-size: 0.9rem;
    padding-bottom: 0.5rem;
}

    .nav-item:first-of-type[b-74pomlm8zd] {
        padding-top: 1rem;
    }

    .nav-item:last-of-type[b-74pomlm8zd] {
        padding-bottom: 1rem;
    }

    .nav-item[b-74pomlm8zd]  .nav-link {
        color: #d7d7d7;
        background: none;
        border: none;
        border-radius: 4px;
        height: 3rem;
        display: flex;
        align-items: center;
        line-height: 3rem;
        width: 100%;
    }

.nav-item[b-74pomlm8zd]  a.active {
    background-color: rgba(255,255,255,0.37);
    color: white;
}

.nav-item[b-74pomlm8zd]  .nav-link:hover {
    background-color: rgba(255,255,255,0.1);
    color: white;
}

.nav-scrollable[b-74pomlm8zd] {
    display: none;
}

.navbar-toggler:checked ~ .nav-scrollable[b-74pomlm8zd] {
    display: block;
}

@media (min-width: 641px) {
    .navbar-toggler[b-74pomlm8zd] {
        display: none;
    }

    .nav-scrollable[b-74pomlm8zd] {
        /* Never collapse the sidebar for wide screens */
        display: block;

        /* Allow sidebar to scroll for tall menus */
        height: calc(100vh - 3.5rem);
        overflow-y: auto;
    }
}
/* _content/GridLancamento/Components/Pages/Ranking.razor.rz.scp.css */
@page

"/Ranking"
@using GridLancamento.Data
@using GridLancamento.Models
@inject PilotoService PilotoService

<style >
.layout-container[b-ytg41ik4z4] {
    display: flex;
    height: 100vh;
    overflow: hidden;
    font-family: sans-serif;
}

.sidebar[b-ytg41ik4z4] {
    width: 280px;
    padding: 1rem;
    background-color: #f5f5f5;
    border-right: 1px solid #ddd;
    overflow-y: auto;
}

.content[b-ytg41ik4z4] {
    flex: 1;
    padding: 2rem;
    overflow-y: auto;
}

.header[b-ytg41ik4z4] {
    background-color: #333;
    color: white;
    padding: 1rem;
    font-size: 1.2rem;
    font-weight: bold;
    text-align: center;
}

.filter-group[b-ytg41ik4z4] {
    margin-bottom: 1rem;
}

    .filter-group label[b-ytg41ik4z4] {
        display: block;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .filter-group select[b-ytg41ik4z4] {
        width: 100%;
        padding: 0.5rem;
    }

.card-grid[b-ytg41ik4z4] {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
    gap: 1rem;
}

.card[b-ytg41ik4z4] {
    border: 1px solid #ccc;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.card-header[b-ytg41ik4z4] {
    background-color: #007bff;
    color: white;
    padding: 0.75rem;
    font-weight: bold;
}

.card-body[b-ytg41ik4z4] {
    padding: 0.75rem;
}

.filter-button[b-ytg41ik4z4] {
    width: 100%;
    padding: 0.5rem;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
}

</style >

<div class="header" >
üèÅ Ranking de Pilotos
</div >

<div class="layout-container" >
<!-- Sidebar -->
<div class="sidebar" >
<div class="filter-group" >
<label > Categoria</label >
<select @bind="filtroCategoria" >
<option value="" > Todas</option >
@foreach (var cat in categorias)[b-ytg41ik4z4] {
    <option value="@cat">@cat</option>
}

</select >
</div >

<div class="filter-group" >
<label > Sexo</label >
<select @bind="filtroSexo" >
<option value="" > Todos</option >
@foreach (var sexo in sexos)[b-ytg41ik4z4] {
    <option value="@sexo">@sexo</option>
}

</select >
</div >

<div class="filter-group" >
<label > Tra√ßado</label >
<select @bind="filtroTracado" >
<option value="" > Todos</option >
@foreach (var tr in tracados)[b-ytg41ik4z4] {
    <option value="@tr">@tr</option>
}

</select >
</div >

<div class="filter-group" >
<label > Peso</label >
<select @bind="filtroPeso" >
<option value="" > Todos</option >
@foreach (var peso in pesos)[b-ytg41ik4z4] {
    <option value="@peso">@peso</option>
}

</select >
</div >

<button class="filter-button" @onclick="Filtrar" >
üîç Filtrar
</button >
</div >
<!-- Content -->
<div class="content" >
@if (gruposFiltrados == null)[b-ytg41ik4z4] {
    <p>‚è≥ Carregando...</p>
}

else if (gruposFiltrados.Count == 0)[b-ytg41ik4z4] {
    <p>üîç Nenhum piloto encontrado com os filtros selecionados.</p>
}

else[b-ytg41ik4z4] {
    <div class="card-grid"> @foreach (var grupo in gruposFiltrados)

{
    <div class="card"> <div class="card-header">@grupo.Key</div> <div class="card-body"> <table style="width: 100%; font-size: 0.9rem;"> <thead> <tr> <th>#</th> <th>Nome</th> <th>Equipe</th> <th>Peso</th> <th>Melhor Volta</th> </tr> </thead> <tbody> @

{
    var index = 1;
    foreach (var piloto in grupo)

{
    <tr> <td>@index</td> <td>@piloto.Nome</td> <td>@piloto.Equipe</td> <td>@piloto.Peso kg</td> <td>@piloto.MelhorVolta</td> </tr> index++;
}

}
</tbody >
</table >
</div >
</div[b-ytg41ik4z4] >
}
</div[b-ytg41ik4z4] >
}

</div >
</div >

@code[b-ytg41ik4z4] {
    private List<Piloto> todosPilotos = new();
    private List<IGrouping<string, Piloto>> gruposFiltrados = new();
    private List<string> categorias = new();
    private List<string> sexos = new();
    private List<string> tracados = new();
    private List<string> pesos = new();
    private string filtroCategoria = "";
    private string filtroSexo = "";
    private string filtroTracado = "";
    private string filtroPeso = "";
    protected override async Task OnInitializedAsync()

{
    todosPilotos = await PilotoService.ObterPilotosAsync();
    PopularFiltros();
    Filtrar();
}

private void PopularFiltros()[b-ytg41ik4z4] {
    categorias = todosPilotos.Select(p => p.Categoria).Distinct().OrderBy(c => c).ToList();
    sexos = todosPilotos.Select(p => p.Sexo).Distinct().OrderBy(s => s).ToList();
    tracados = todosPilotos.Select(p => p.Tracado).Distinct().OrderBy(t => t).ToList();
    pesos = todosPilotos.Select(p => p.Peso.ToString()).Distinct().OrderBy(p => p).ToList();
}

private void Filtrar()[b-ytg41ik4z4] {
    var filtrados = todosPilotos .Where(p => (string.IsNullOrWhiteSpace(filtroCategoria) || p.Categoria == filtroCategoria) && (string.IsNullOrWhiteSpace(filtroSexo) || p.Sexo == filtroSexo) && (string.IsNullOrWhiteSpace(filtroTracado) || p.Tracado == filtroTracado) && (string.IsNullOrWhiteSpace(filtroPeso) || p.Peso.ToString() == filtroPeso) ) .OrderBy(p => {
                var partes = p.MelhorVolta.Split(':');
                if (partes.Length == 3 &&
                    int.TryParse(partes[0], out int min) &&
                    int.TryParse(partes[1], out int seg) &&
                    int.TryParse(partes[2], out int ms))
                {
                    return new TimeSpan(0, 0, min, seg, ms);
                }
                return TimeSpan.MaxValue;
            });
    if (!string.IsNullOrWhiteSpace(filtroPeso))

{
    gruposFiltrados = filtrados .GroupBy(p => $"Peso: {filtroPeso} kg") .ToList();
}

else[b-ytg41ik4z4] {
    gruposFiltrados = filtrados .GroupBy(p => $"{p.Categoria} - {p.Sexo} - {p.Tracado}") .ToList();
}

StateHasChanged();[b-ytg41ik4z4]
}
}
